{"version":3,"sources":["components/Navbar.js","components/Clock.js","components/Content.js","components/Converter/index.js","components/Routes/index.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","changeToClock","pageStatus","handleStatus","changeToContent","changeToConverter","state","this","className","classNames","onClick","Component","Clock","number","timerID","setInterval","setState","console","log","clearInterval","Content","Converter","syncData","event","target","name","value","temp","parseInt","toman","toString","dollar","type","placeholder","onChange","index","handeler","App","pageName","Routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0868e052.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nclass Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // this.changeToClock = this.changeToClock.bind(this);\r\n      // this.changeToContent = this.changeToContent.bind(this);\r\n    };\r\n  }\r\n\r\n  changeToClock = () => {\r\n    const { pageStatus, handleStatus } = this.props;\r\n    handleStatus(\"clock\");\r\n\r\n    //console.log(pageStatus);\r\n  };\r\n\r\n  changeToContent = () => {\r\n    const { pageStatus, handleStatus } = this.props;\r\n    handleStatus(\"content\");\r\n\r\n    //console.log(pageStatus);\r\n  };\r\n\r\n  changeToConverter = () => {\r\n    const { pageStatus, handleStatus } = this.props;\r\n    handleStatus(\"converter\");\r\n\r\n    //console.log(pageStatus);\r\n  };\r\n\r\n  render() {\r\n    const { pageStatus } = this.props;\r\n    return (\r\n      <div className=\"d-flex justify-content-center align-items-center p-5\">\r\n        <button\r\n          className={classNames(\r\n            \"btn mx-2\",\r\n            {\r\n              \"btn-outline-primary\": pageStatus !== \"clock\"\r\n            },\r\n            {\r\n              \"btn-primary\": pageStatus === \"clock\"\r\n            }\r\n          )}\r\n          onClick={this.changeToClock}\r\n        >\r\n          clock\r\n        </button>\r\n\r\n        <button\r\n          className={classNames(\r\n            \"btn mx-2\",\r\n            {\r\n              \"btn-outline-primary\": pageStatus !== \"converter\"\r\n            },\r\n            {\r\n              \"btn-primary\": pageStatus === \"converter\"\r\n            }\r\n          )}\r\n          onClick={this.changeToConverter}\r\n        >\r\n          converter\r\n        </button>\r\n\r\n        <button\r\n          className={classNames(\r\n            \"btn mx-2\",\r\n            {\r\n              \"btn-outline-primary\": pageStatus !== \"content\"\r\n            },\r\n            {\r\n              \"btn-primary\": pageStatus === \"content\"\r\n            }\r\n          )}\r\n          onClick={this.changeToContent}\r\n        >\r\n          content\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Clock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      number: 0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => {\r\n      this.setState({\r\n        number: this.state.number + 1\r\n      });\r\n      console.log(this.state.number);\r\n    }, 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <p>{this.state.number}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Content extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <p>content</p>\r\n        {/* <p className=\"a\">\r\n          <p className=\"b\">\r\n            <p className=\"c\">قرمز</p>\r\n          </p>\r\n        </p> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Converter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      toman: \"\",\r\n      dollar: \"\"\r\n    };\r\n  }\r\n\r\n  syncData = event => {\r\n    // console.log(typeof(event.target.name));\r\n    if (event.target.name === \"dolar\") {\r\n      console.log(\"if running\");\r\n      console.log(\r\n        \"target name: \" +\r\n          event.target.name +\r\n          \" - target value: \" +\r\n          event.target.value\r\n      );\r\n      console.log(\"type of target value: \" + typeof event.target.value);\r\n\r\n      let temp = parseInt(event.target.value) * 12000;\r\n      console.log(temp);\r\n      console.log(typeof temp);\r\n\r\n      this.setState({\r\n        toman: temp.toString(),\r\n        dollar: event.target.value.toString()\r\n      });\r\n\r\n      console.log(\"toman: \" + this.state.toman);\r\n      console.log(\"dollar: \" + this.state.dollar);\r\n      console.log(\"type of toman: \" + typeof this.state.toman);\r\n      console.log(\"type of dolar: \" + typeof this.state.dollar);\r\n\r\n      console.log(\"*************************************\");\r\n    } else {\r\n      console.log(\"else running\");\r\n      console.log(\r\n        \"target name: \" +\r\n          event.target.name +\r\n          \" - target value: \" +\r\n          event.target.value\r\n      );\r\n      console.log(\"type of target value: \" + typeof event.target.value);\r\n\r\n      let temp = parseInt(event.target.value) / 12000;\r\n\r\n      console.log(temp);\r\n      this.setState({\r\n        toman: event.target.value.toString(),\r\n        dollar: temp.toString()\r\n      });\r\n\r\n      console.log(temp);\r\n      console.log(typeof temp);\r\n\r\n      console.log(\"type of toman: \" + typeof this.state.toman);\r\n      console.log(\"type of dolar: \" + typeof this.state.dollar);\r\n\r\n      console.log(\"*************************************\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form>\r\n          <div className=\"form-row\">\r\n            <div className=\"col-6\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"dolar\"\r\n                name=\"dolar\"\r\n                className=\"form-control\"\r\n                value={this.state.dollar}\r\n                onChange={this.syncData}\r\n              ></input>\r\n            </div>\r\n            <div className=\"col-6\">\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Toman\"\r\n                name=\"toman\"\r\n                className=\"form-control\"\r\n                value={this.state.toman}\r\n                onChange={this.syncData}\r\n              ></input>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import React, { Component } from \"react\";\r\nimport Clock from \"../Clock\";\r\nimport Content from \"../Content\";\r\nimport Converter from \"../Converter\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  handeler = () => {\r\n    const { pageStatus } = this.props;\r\n    if (pageStatus === \"content\") {\r\n      return <Content></Content>;\r\n    } else if (pageStatus === \"clock\") {\r\n      return <Clock></Clock>;\r\n    } else {\r\n      return <Converter></Converter>;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div>{this.handeler()}</div>;\r\n  }\r\n}\r\n\r\nexport default index;\r\n","import React, { Component } from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Routes from \"./components/Routes\";\r\n// import \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pageStatus: \"converter\"\r\n    };\r\n\r\n    // this.handeler = this.handeler.bind(this);\r\n  }\r\n\r\n  // handeler = () => {\r\n  //   if (this.state.pageStatus == \"content\") {\r\n  //     return <Content></Content>;\r\n  //   } else {\r\n  //     return <Clock></Clock>;\r\n  //   }\r\n  // };\r\n\r\n  handleStatus = pageName => {\r\n    this.setState({\r\n      pageStatus: pageName\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          pageStatus={this.state.pageStatus}\r\n          handleStatus={this.handleStatus}\r\n          // {...this.props}\r\n        ></Navbar>\r\n\r\n        <Routes pageStatus={this.state.pageStatus}></Routes>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}